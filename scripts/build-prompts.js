const fs = require('fs');
const path = require('path');

const promptsDir = path.join(__dirname, '..', 'prompts');
const outputFile = path.join(__dirname, '..', 'prompts.js');
const swFile = path.join(__dirname, '..', 'sw.js');

function readJSON(filePath) {
  return JSON.parse(fs.readFileSync(filePath, 'utf8'));
}

function buildPrompts() {
  const result = {};
  for (const lang of fs.readdirSync(promptsDir)) {
    const langDir = path.join(promptsDir, lang);
    if (!fs.statSync(langDir).isDirectory()) continue;
    result[lang] = {};
    for (const file of fs.readdirSync(langDir)) {
      if (file.endsWith('.json')) {
        const key = path.basename(file, '.json');
        result[lang][key] = readJSON(path.join(langDir, file));
      }
    }
  }
  return result;
}

function listPromptFiles() {
  const files = [];
  for (const lang of fs.readdirSync(promptsDir)) {
    const langDir = path.join(promptsDir, lang);
    if (!fs.statSync(langDir).isDirectory()) continue;
    for (const file of fs.readdirSync(langDir)) {
      if (file.endsWith('.json')) {
        files.push(`./prompts/${lang}/${file}`);
      }
    }
  }
  return files.sort();
}

function updateServiceWorker(promptFiles) {
  const swSrc = fs.readFileSync(swFile, 'utf8');
  const lines = swSrc.split(/\r?\n/);
  const start = lines.findIndex((l) => l.trim() === 'const ASSETS = [');
  const end = lines.findIndex((l, i) => i > start && l.trim() === '];');
  if (start === -1 || end === -1) {
    throw new Error('ASSETS array not found in sw.js');
  }
  const baseAssets = [
    './',
    './index.html',
    './tailwind.js',
    './lucide.min.js',
  './src/main.js',
  './icons/logo.svg',
  './css/app.css',
  './css/theme-dark.css',
  './css/theme-light.css',
];
  const assets = [...baseAssets, ...promptFiles];
  const indent = '  ';
  const newLines = [
    'const ASSETS = [',
    ...assets.map(
      (a, i) => `${indent}'${a}'${i === assets.length - 1 ? '' : ','}`
    ),
    '];',
  ];
  const updated = [
    ...lines.slice(0, start),
    ...newLines,
    ...lines.slice(end + 1),
  ].join('\n');
  fs.writeFileSync(swFile, updated);
  console.log(`Updated ${swFile}`);
}

const prompts = buildPrompts();
const output = `// Auto-generated by scripts/build-prompts.js\nwindow.prompts = ${JSON.stringify(
  prompts,
  null,
  2
)};\n`;
fs.writeFileSync(outputFile, output);
console.log(`Wrote ${outputFile}`);

const promptFiles = listPromptFiles();
updateServiceWorker(promptFiles);
