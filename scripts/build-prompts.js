const fs = require('fs');
const path = require('path');

const promptsDir = path.join(__dirname, '..', 'prompts');
const outputFile = path.join(__dirname, '..', 'prompts.js');
const manifestFile = path.join(__dirname, '..', 'manifest.json');

function readJSON(filePath) {
  return JSON.parse(fs.readFileSync(filePath, 'utf8'));
}

const preservePunctuation = {
  mindBlowing: [2],
  video: [2],
  image: [2],
};

function stripPunctuation(str) {
  return str.replace(/[.!?]+$/, '');
}

function cleanParts(key, parts) {
  return parts.map((arr, idx) => {
    if (idx < 3 && !(preservePunctuation[key] || []).includes(idx)) {
      return arr.map((s) => stripPunctuation(s));
    }
    return arr;
  });
}

function buildPrompts() {
  const result = {};
  for (const lang of fs.readdirSync(promptsDir)) {
    const langDir = path.join(promptsDir, lang);
    if (!fs.statSync(langDir).isDirectory()) continue;
    result[lang] = {};
    for (const file of fs.readdirSync(langDir)) {
      if (file.endsWith('.json')) {
        const key = path.basename(file, '.json');
        const data = readJSON(path.join(langDir, file));
        if (Array.isArray(data.parts)) {
          data.parts = cleanParts(key, data.parts);
        }
        result[lang][key] = data;
      }
    }
  }
  return result;
}


function bumpManifestVersion() {
  const manifest = readJSON(manifestFile);
  const current = parseInt(manifest.version, 10);
  const next = Number.isNaN(current) ? 1 : current + 1;
  manifest.version = String(next);
  fs.writeFileSync(manifestFile, JSON.stringify(manifest, null, 2) + '\n');
  console.log(`Updated ${manifestFile} to version ${manifest.version}`);
}

const prompts = buildPrompts();
const output = `// Auto-generated by scripts/build-prompts.js\nwindow.prompts = ${JSON.stringify(
  prompts,
  null,
  2
)};\n`;
fs.writeFileSync(outputFile, output);
console.log(`Wrote ${outputFile}`);

bumpManifestVersion();
